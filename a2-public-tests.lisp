; Cmput 325 Winter 2020 Assignment 2
; Public test cases
; Martin Mueller

; How to use:
; First, load your assignment solution into SBCL
; Second, load this file.
; Third, fix the bugs and run this file again
; You can also copy+paste individual tests from here into SBCL

(defun test-case (ID Test Result)
    (if (equal Test Result)
        (format t "Test ~S OK~%" ID)
        (format t "FAIL: Test ~S expected ~S got ~S~%" ID Result Test)
    )
)

; euclid
(test-case 1.1 (euclid 4 5) 1)
(test-case 1.2 (euclid 4 50) 2)
(test-case 1.3 (euclid 0 5) 'GCD-ERROR)
(test-case 1.4 (euclid 0 0) 'GCD-ERROR)
(test-case 1.5 (euclid 1000000000000000000 0) 'GCD-ERROR)
(test-case 1.6 (euclid 12345 54321) 3)
(test-case 1.7 (euclid 2455451323 (* 188880871 188880871)) 188880871)
(test-case 1.8 (euclid 63245986 102334155) 1)
(test-case 1.9 (euclid (* 2 3 7 13 31) (* 3 3 5 7 11 13)) (* 3 7 13))

; simplifyfraction
(test-case 2.1 (simplifyfraction '(5 . 1)) 5)
(test-case 2.2 (simplifyfraction '(15 . 5)) 3)
(test-case 2.3 (simplifyfraction '(-100 . -4)) 25)
(test-case 2.4 (simplifyfraction '(0 . 2)) 0)
(test-case 2.5 (simplifyfraction '(105 . 6)) '(35 . 2))
(test-case 2.6 (simplifyfraction '(4 . -8)) '(-1 . 2))
(test-case 2.7 (simplifyfraction '(102334155 . 63245986)) '(102334155 . 63245986))
(test-case 2.8 (simplifyfraction '(35675983429718641 . 2455451323)) '(188880871 . 13))
(test-case 2.9 (simplifyfraction '(10 . 0)) 'ZERODIVIDE-ERROR)
(test-case "2.10" (simplifyfraction '(0 . 0)) 'ZERODIVIDE-ERROR)

; simplifybinary
(test-case 3.1 (simplifybinary 5) 5)
(test-case 3.2 (simplifybinary '(50 . -10)) -5)
(test-case 3.3 (simplifybinary '(60 . 8)) '(15 . 2))
(test-case 3.4 (simplifybinary '(3 + 5)) 8)
(test-case 3.5 (simplifybinary '(((1 + 1) * (1 + 1)) * ((1 + 1) * (1 + 1)))) 16)
(test-case 3.6 (simplifybinary '(3 / 0)) 'ZERODIVIDE-ERROR)
(test-case 3.7 (simplifybinary '(1 + (3 / (5 - 5)))) 'ZERODIVIDE-ERROR)
(test-case 3.8 (simplifybinary '((1 / 2) + (1 / 2))) 1)
(test-case 3.9 (simplifybinary '((1 / 2) + (1 / 3))) '(5 . 6))
(test-case "3.10" (simplifybinary '((1 . 2) + (1 . 3))) '(5 . 6))
(test-case 3.11 (simplifybinary '(1 / 3)) '(1 . 3))
(test-case 3.12 (simplifybinary '((1 . 3) / (5 . 7))) '(7 . 15))
(test-case 3.13 (simplifybinary '(60 . 8)) '(15 . 2))
(test-case 3.14 (simplifybinary '((2 + (3 * 5)) - (7 / 4))) '(61 . 4))
(test-case 3.15 (simplifybinary '(1 + (1 + ((1 / 2) + ((1 / (2 * 3)) + ((1 / ((2 * 3) * 4)) + (1 / (((2 * 3) * 4) * 5)))))))) '(163 . 60))
(test-case 3.16 (simplifybinary '(0 * (1 / 0))) 'ZERODIVIDE-ERROR)
(test-case 3.17 (simplifybinary '(0 / 0)) 'ZERODIVIDE-ERROR)
(test-case 3.18 (simplifybinary '(2 + (0 * (1 / (5 - 5))))) 'ZERODIVIDE-ERROR)

(test-case 4.1 (binarize 2) 2)
(test-case 4.2 (binarize '(2 + 3)) '(2 + 3))
(test-case 4.3 (binarize '(2 / 3 * 4)) '((2 / 3) * 4))
(test-case 4.4 (binarize '(2 + 3 + 5 - 7 + 4)) '((((2 + 3) + 5) - 7) + 4))
(test-case 4.5 (binarize '(2 + 3 * 5 - 7 / 4)) '((2 + (3 * 5)) - (7 / 4)))
(test-case 4.6 (binarize '(2 + 3 * 5 / 7 / 4)) '(2 + (((3 * 5) / 7) / 4)))
(test-case 4.7 (binarize '((1 . 2) + (3 . 5) + (7 . 4))) '(((1 . 2) + (3 . 5)) + (7 . 4)))
(test-case 4.8 (binarize '((2 + 3 + 5 - 7 + 4) * (2 + 3 + 5 - 7 + 4))) '(((((2 + 3) + 5) - 7) + 4) * ((((2 + 3) + 5) - 7) + 4)))
(test-case 4.9 (binarize '(0 / 0 / 0 / 0 / 0)) '((((0 / 0) / 0) / 0) / 0))
(test-case "4.10" (binarize '((1 + 2 + 3) * (4 + 5 * 6) + (7 * 8 / 9) / (10 - 11 / (12 - 13 * 14)))) '((((1 + 2) + 3) * (4 + (5 * 6))) + (((7 * 8) / 9) / (10 - (11 / (12 - (13 * 14)))))))
(test-case 4.11 (binarize '((1 + (2 . 5) + 3) * (4 + 5 * 6) + (7 * 8 / (9 . 2)) / (10 - 11 / (12 - 13 * (14 . 15))))) '((((1 + (2 . 5)) + 3) * (4 + (5 * 6))) + (((7 * 8) / (9 . 2)) / (10 - (11 / (12 - (13 * (14 . 15))))))))
(test-case 4.12 (binarize '(1 / (5 - 3 - 2))) '(1 / ((5 - 3) - 2)))

(test-case 5.1 (simplify 5) 5)
(test-case 5.2 (simplify '(50 . -10)) -5)
(test-case 5.3 (simplify '(60 . 8)) '(15 . 2))
(test-case 5.4 (simplify '(3 + 5)) 8)
(test-case 5.5 (simplify '(((1 + 1) * (1 + 1)) * ((1 + 1) * (1 + 1)))) 16)
(test-case 5.6 (simplify '(3 / 0)) 'ZERODIVIDE-ERROR)
(test-case 5.7 (simplify '(1 - 1 * 1 - 1 / 1)) -1)
(test-case 5.8 (simplify '(1 + 1 + 1 / 2 + 1 / (2 * 3) + 1 / (2 * 3 * 4) + 1 / (2 * 3 * 4 * 5))) '(163 . 60))
(test-case 5.9 (simplify '(0 / 0 / 0 / 0 / 0)) 'ZERODIVIDE-ERROR)
(test-case "5.10" (simplify '((2 + 3 + 5 - 7 + 4) * (2 + 3 + 5 - 7 + 4))) 49)
(test-case 5.11 (simplify '((1 . 2) + (3 . 5) + (7 . 4))) '(57 . 20))
(test-case 5.12 (simplify '((1 . 3) / (5 . 7))) '(7 . 15))
(test-case 5.13 (simplify '((1 . 3) / (5 . 7) * (30 . 7))) 2)
(test-case 5.14 (simplify '(1 + 1 + (1 . 2) + (1 . 6) + (1 . 24) + (1 . 120))) '(163 . 60))
(test-case 5.15 (simplify '((2 + (3 * 5)) - (7 / 4))) '(61 . 4))
(test-case 5.16 (simplify '(2 + 3 * 5 - 7 / 4)) '(61 . 4))
(test-case 5.17 (simplify '(2 + (((3 * 5) / 7) / 4))) '(71 . 28))
(test-case 5.18 (simplify '(2 + 3 * 5 / 7 / 4)) '(71 . 28))
(test-case 5.19 (simplify '((1 . 9) + ((-4 . 6) + (-4 . 6)) * ((-4 . 6) + (-4 . 6)))) '(17 . 9) )
(test-case "5.20" (simplify '(1 + 2 / 3)) '(5 . 3))
(test-case 5.21 (simplify '(1 / (5 - 3 - 2))) 'ZERODIVIDE-ERROR)
(test-case 5.22 (simplify '(1 / (1 / (1 / (1 / (5 - 3 - 2))) ))) 'ZERODIVIDE-ERROR)
(test-case 5.23 (simplify '(1 / (1 / (1 / (1 / (5 - 3 - (5 . 2)))) ))) '(-1 . 2))

; substitutevar
(test-case 6.1 (substitutevar nil '(1 + 2 / 3)) '(1 + 2 / 3))
(test-case 6.2 (substitutevar '((a 5)) 'a) 5)
(test-case 6.3 (substitutevar '((d 9)(b 6)(a 5)) 'a) 5)
(test-case 6.4 (substitutevar '((d 9)(b 6)(z 0)(a -5)) '(a + b + z + d)) '(-5 + 6 + 0 + 9))
(test-case 6.5 (substitutevar '((x 1)) '(2 + x)) '(2 + 1))
(test-case 6.6 (substitutevar '((x 1) (y (2 + 3))) '(x + x + y)) '(1 + 1 + 5))
(test-case 6.7 (substitutevar '((x 0)) '(x / x / x / x / x)) '(0 / 0 / 0 / 0 / 0))
(test-case 6.8 (substitutevar '((x 1)) '(((x + x) - (x + x)) * ((x + x) * (x / x)))) '(((1 + 1) - (1 + 1)) * ((1 + 1) * (1 / 1))))
(test-case 6.9 (substitutevar '((x (3 . 5)) (y (1 + 1 + (1 . 2) + (1 . 6) + (1 . 24) + (1 . 120)))) '(((x + y) - (y + x)) * ((y + y) * (x / (5. 3))))) '((((3 . 5) + (163 . 60)) - ((163 . 60) + (3 . 5))) * (((163 . 60) + (163 . 60)) * ((3 . 5) / (5. 3)))))
(test-case "6.10" (substitutevar '((x 5) (y 3)) '(1 / (x - y - 2))) '(1 / (5 - 3 - 2)))

; simplifyvar
(test-case 7.1 (simplifyvar '((x 1)) '(2 + x)) 3)
(test-case 7.2 (simplifyvar '((x 1) (y (2 + 3))) '(x + x + y)) 7)
(test-case 7.3 (simplifyvar nil '(1 + 2 / 3)) '(5 . 3))
(test-case 7.4 (simplifyvar '((a 5)) 'a) 5)
(test-case 7.5 (simplifyvar '((d 9)(b 6)(a 5)) 'a) 5)
(test-case 7.6 (simplifyvar '((d 9)(b 6)(z 0)(a -5)) '(a + b + z + d)) 10)
(test-case 7.7 (simplifyvar '((x 5) (y 3)) '(1 / (x - y - 2))) 'ZERODIVIDE-ERROR)
(test-case 7.8 (simplifyvar '((x 5) (y (11 . 3))) '(1 / (x - y - 2))) '(-3 . 2))
(test-case 7.9 (simplifyvar '((x 0)) '(x / x / x / x / x)) 'ZERODIVIDE-ERROR)
(test-case "7.10" (simplifyvar '((x 1)) '(((x + x) - (x + x)) * ((x + x) * (x / x)))) 0)
(test-case 7.11 (simplifyvar '((x (3 . 5)) (y (1 + 1 + (1 . 2) + (1 . 6) + (1 . 24) + (1 . 120)))) 'x) '(3 . 5))
(test-case 7.12 (simplifyvar '((x (3 . 5)) (y (1 + 1 + (1 . 2) + (1 . 6) + (1 . 24) + (1 . 120)))) 'y) '(163 . 60))
(test-case 7.13 (simplifyvar '((x (3 . 5)) (y (1 + 1 + (1 . 2) + (1 . 6) + (1 . 24) + (1 . 120)))) '(((x + y) - (y + x)) * ((y + y) * (x / (5 . 3))))) 0)
(test-case 7.14 (simplifyvar '((x (3 . 5)) (y (1 + 1 + (1 . 2) + (1 . 6) + (1 . 24) + (1 . 120)))) '(((x + y) - (y - x)) * ((y + y) * (x / (5 . 3))))) '(1467 . 625))
(test-case 7.15 (simplifyvar '((x 2)) '(1 / (1 / (1 / (1 / (5 - 3 - x))) ))) 'ZERODIVIDE-ERROR)
(test-case 7.16 (simplifyvar '((x (5 . 2))) '(1 / (1 / (1 / (1 / (5 - 3 - x))) ))) '(-1 . 2))
